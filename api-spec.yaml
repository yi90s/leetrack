---
openapi: 3.0.0
info:
  title: Leetrack API
  description: This is a sample API documentation.
  version: 1.0.0
servers:
- url: http://localhost:3000/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Json Web Token

paths:
  "/auth/token":
    get:
      summary: Jwt-based user authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '401':
          description: Incorrect username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Incorrect username or password
  "/users/register":
    post:
      summary: User Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The user has been created
        '401':
          description: Invalid registration request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Invalid username, password, or email
  "/users/{userid}/attempts":
    get:
      summary: Get all attempts of the user
      security:
      - bearerAuth: []
      responses:
        '200':
          description: User's attempted problems read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attemptedProblems:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Two Sum
                      lastAttempted:
                        type: number
                        example: 1714329755
                      difficulty:
                        type: string
                        example: Easy
                      topics:
                        type: string
                        example: Hash Map, Array
  "/users/{userid}/attempt":
    post:
      summary: add a new attempt for the user
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                problemId:
                  type: string
      responses:
        '200':
          description: The attempt is added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The attempt has been created
        '401':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Invalid problem id
